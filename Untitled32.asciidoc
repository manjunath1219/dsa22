+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ Question-1:

Given a Binary Tree (Bt), convert it to a Doubly Linked List(DLL). The left and right pointers in nodes are to be used as previous and next pointers respectively in converted DLL. The order of nodes in DLL must be the same as in Inorder for the given Binary Tree. The first node of Inorder traversal (leftmost node in BT) must be the head node of the DLL.

Example:

</aside>
----


+*In[1]:*+
[source, ipython3]
----
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

class DoublyLinkedListNode:
    def __init__(self, value):
        self.value = value
        self.prev = None
        self.next = None

def binary_tree_to_dll(root):
    def convert(root):
        nonlocal prev, head

        if root is None:
            return

        # Convert the left subtree
        convert(root.left)

        if prev is None:
            # Set the head of the doubly linked list
            head = DoublyLinkedListNode(root.value)
            prev = head
        else:
            # Append the current node to the doubly linked list
            new_node = DoublyLinkedListNode(root.value)
            prev.next = new_node
            new_node.prev = prev
            prev = new_node

        # Convert the right subtree
        convert(root.right)

    head = None
    prev = None
    convert(root)
    return head

# Construct the given binary tree
root = TreeNode(10)
root.left = TreeNode(5)
root.right = TreeNode(20)
root.right.left = TreeNode(15)
root.right.right = TreeNode(30)

# Convert binary tree to doubly linked list
dll_head = binary_tree_to_dll(root)

# Print the resulting doubly linked list (forward traversal)
def print_dll_forward(head):
    current = head
    while current:
        print(current.value, end=" ")
        current = current.next

# Print the resulting doubly linked list (backward traversal)
def print_dll_backward(head):
    current = head
    while current.next:
        current = current.next
    while current:
        print(current.value, end=" ")
        current = current.prev

print("Forward traversal of the DLL:")
print_dll_forward(dll_head)

print("\nBackward traversal of the DLL:")
print_dll_backward(dll_head)
----


+*Out[1]:*+
----
Forward traversal of the DLL:
5 10 15 20 30 
Backward traversal of the DLL:
30 20 15 10 5 ----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ Question-2

A Given a binary tree, the task is to flip the binary tree towards the right direction that is clockwise. See the below examples to see the transformation.

In the flip operation, the leftmost node becomes the root of the flipped tree and its parent becomes its right child and the right sibling becomes its left child and the same should be done for all left most nodes recursively.

</aside>
----


+*In[2]:*+
[source, ipython3]
----
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def flip_binary_tree(root):
    if root is None or (root.left is None and root.right is None):
        # Base case: empty tree or leaf node
        return root

    # Flip the left and right children
    flipped_left = flip_binary_tree(root.left)
    flipped_right = flip_binary_tree(root.right)
    
    # Swap the left and right children
    root.left = flipped_right
    root.right = flipped_left

    return root

# Construct the given binary tree
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
root.right.left = TreeNode(6)
root.right.right = TreeNode(7)

# Flip the binary tree
flipped_tree = flip_binary_tree(root)

# Print the flipped binary tree (preorder traversal)
def print_tree(root):
    if root is None:
        return

    print(root.value, end=" ")
    print_tree(root.left)
    print_tree(root.right)

print("Flipped binary tree (preorder traversal):")
print_tree(flipped_tree)
----


+*Out[2]:*+
----
Flipped binary tree (preorder traversal):
1 3 7 6 2 5 4 ----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ Question-3:

Given a binary tree, print all its root-to-leaf paths without using recursion. For example, consider the following Binary Tree.

Input:

        6
     /    \
    3      5
  /   \     \
 2     5     4
     /   \
    7     4

Output:

There are 4 leaves, hence 4 root to leaf paths -
  6->3->2
  6->3->5->7
  6->3->5->4
  6->5>4

</aside>
----


+*In[3]:*+
[source, ipython3]
----
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def print_root_to_leaf_paths(root):
    if root is None:
        return

    stack = [(root, str(root.value))]  # Stack to perform iterative traversal
    paths = []  # Stack to store the paths

    while stack:
        node, path = stack.pop()

        if node.left is None and node.right is None:
            # Leaf node, add the path to the list of paths
            paths.append(path)
        if node.right:
            stack.append((node.right, path + "->" + str(node.right.value)))
        if node.left:
            stack.append((node.left, path + "->" + str(node.left.value)))

    # Print the paths
    for path in paths:
        print(path)

# Construct the given binary tree
root = TreeNode(6)
root.left = TreeNode(3)
root.right = TreeNode(5)
root.left.left = TreeNode(2)
root.left.right = TreeNode(5)
root.right.right = TreeNode(4)
root.left.right.left = TreeNode(7)
root.left.right.right = TreeNode(4)

# Print all root-to-leaf paths
print("Root-to-leaf paths:")
print_root_to_leaf_paths(root)
----


+*Out[3]:*+
----
Root-to-leaf paths:
6->3->2
6->3->5->7
6->3->5->4
6->5->4
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ Question-4:

GivenÂ Preorder, Inorder and PostorderÂ traversals of some tree. Write a program to check if they all are of the same tree.

**Examples:**

Input : 

        Inorder -> 4 2 5 1 3
        Preorder -> 1 2 4 5 3
        Postorder -> 4 5 2 3 1
Output : 

Yes
Explanation : 

All of the above three traversals are of
the same tree 

                           1
                         /   \
                        2     3
                      /   \
                     4     5

Input : 

        Inorder -> 4 2 5 1 3
        Preorder -> 1 5 4 2 3
        Postorder -> 4 1 2 3 5
Output : 

No

</aside>
----


+*In[4]:*+
[source, ipython3]
----
def check_traversals(preorder, inorder, postorder):
    if not preorder and not inorder and not postorder:
        # Base case: empty traversals
        return True

    if len(preorder) != len(inorder) or len(inorder) != len(postorder):
        # Lengths of traversals don't match, not the same tree
        return False

    if preorder[0] != inorder[0] or inorder[-1] != postorder[-1]:
        # Root values of traversals don't match, not the same tree
        return False

    root_value = preorder[0]
    root_index = inorder.index(root_value)

    left_inorder = inorder[:root_index]
    right_inorder = inorder[root_index+1:]

    left_preorder = preorder[1:root_index+1]
    right_preorder = preorder[root_index+1:]

    left_postorder = postorder[:root_index]
    right_postorder = postorder[root_index:-1]

    # Recursively check if the left and right subtrees are the same tree
    return (check_traversals(left_preorder, left_inorder, left_postorder) and
            check_traversals(right_preorder, right_inorder, right_postorder))

# Example 1:
inorder1 = [4, 2, 5, 1, 3]
preorder1 = [1, 2, 4, 5, 3]
postorder1 = [4, 5, 2, 3, 1]

print("Example 1:")
if check_traversals(preorder1, inorder1, postorder1):
    print("Yes")
else:
    print("No")

# Example 2:
inorder2 = [4, 2, 5, 1, 3]
preorder2 = [1, 5, 4, 2, 3]
postorder2 = [4, 1, 2, 3, 5]

print("Example 2:")
if check_traversals(preorder2, inorder2, postorder2):
    print("Yes")
else:
    print("No")
----


+*Out[4]:*+
----
Example 1:
No
Example 2:
No
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
